--- src/mod_openssl.c
+++ src/mod_openssl.c
@@ -85,6 +85,11 @@
 #define LOCAL_SEND_BUFSIZE (64 * 1024)
 static char *local_send_buffer;
 
+static char* lighttpd_ERR_error_string_n(unsigned long e, char* buf, unsigned long len) {
+     ERR_error_string_n(e, buf, len);
+     return buf;
+}
+
 typedef struct {
     SSL *ssl;
     connection *con;
@@ -383,29 +388,32 @@
     /* first set certificate!
      * setting private key checks whether certificate matches it */
     if (1 != SSL_use_certificate(ssl, hctx->conf.ssl_pemfile_x509)) {
+	char ssl_error_string_buf[256];
         log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
                         "failed to set certificate for TLS server name",
                         con->uri.authority,
-                        ERR_error_string(ERR_get_error(), NULL));
+                        lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
         return SSL_TLSEXT_ERR_ALERT_FATAL;
     }
 
     if (1 != SSL_use_PrivateKey(ssl, hctx->conf.ssl_pemfile_pkey)) {
+	char ssl_error_string_buf[256];
         log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
                         "failed to set private key for TLS server name",
                         con->uri.authority,
-                        ERR_error_string(ERR_get_error(), NULL));
+                        lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
         return SSL_TLSEXT_ERR_ALERT_FATAL;
     }
 
     if (hctx->conf.ssl_verifyclient) {
         int mode;
         if (NULL == hctx->conf.ssl_ca_file_cert_names) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
                             "can't verify client without ssl.ca-file "
                             "or ssl.ca-dn-file for TLS server name",
                             con->uri.authority,
-                            ERR_error_string(ERR_get_error(), NULL));
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             return SSL_TLSEXT_ERR_ALERT_FATAL;
         }
 
@@ -522,9 +530,10 @@
     if (NULL == s->ssl_pemfile_pkey) return -1;
 
     if (!X509_check_private_key(s->ssl_pemfile_x509, s->ssl_pemfile_pkey)) {
+	char ssl_error_string_buf[256];
         log_error_write(srv, __FILE__, __LINE__, "sssbb", "SSL:",
                         "Private key does not match the certificate public key,"
-                        " reason:", ERR_error_string(ERR_get_error(), NULL),
+                        " reason:",  lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                         s->ssl_pemfile, s->ssl_privkey);
         return -1;
     }
@@ -587,9 +596,10 @@
 
       #if 0 /* redundant with below? */
         if (!X509_check_private_key(ssl_pemfile_x509, ssl_pemfile_pkey)) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "sssb", "SSL:",
                "Private key does not match acme-tls/1 certificate public key,"
-               " reason:" ERR_error_string(ERR_get_error(), NULL), b);
+               " reason:" lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             break;
         }
       #endif
@@ -597,16 +607,18 @@
         /* first set certificate!
          * setting private key checks whether certificate matches it */
         if (1 != SSL_use_certificate(ssl, ssl_pemfile_x509)) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
               "failed to set acme-tls/1 certificate for TLS server name",
-              name, ERR_error_string(ERR_get_error(), NULL));
+              name, lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             break;
         }
 
         if (1 != SSL_use_PrivateKey(ssl, ssl_pemfile_pkey)) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
               "failed to set acme-tls/1 private key for TLS server name",
-              name, ERR_error_string(ERR_get_error(), NULL));
+              name, lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             break;
         }
 
@@ -719,18 +731,20 @@
         ds = (data_string *)s->ssl_conf_cmd->data[i];
         ERR_clear_error();
         if (SSL_CONF_cmd(cctx, ds->key->ptr, ds->value->ptr) <= 0) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ssbbss", "SSL:",
                             "SSL_CONF_cmd", ds->key, ds->value, ":",
-                            ERR_error_string(ERR_get_error(), NULL));
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             rc = -1;
             break;
         }
     }
 
     if (0 == rc && 1 != SSL_CONF_CTX_finish(cctx)) {
+        char ssl_error_string_buf[256];
         log_error_write(srv, __FILE__, __LINE__, "sss", "SSL:",
                         "SSL_CONF_CTX_finish():",
-                        ERR_error_string(ERR_get_error(), NULL));
+                        lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
         rc = -1;
     }
 
@@ -871,8 +885,9 @@
             s->ssl_ca_file_cert_names =
               SSL_load_client_CA_file(s->ssl_ca_dn_file->ptr);
             if (NULL == s->ssl_ca_file_cert_names) {
+		char ssl_error_string_buf[256];
                 log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-                                ERR_error_string(ERR_get_error(), NULL),
+                                lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                                 s->ssl_ca_dn_file);
             }
         }
@@ -882,8 +897,9 @@
             s->ssl_ca_file_cert_names =
               SSL_load_client_CA_file(s->ssl_ca_file->ptr);
             if (NULL == s->ssl_ca_file_cert_names) {
+		char ssl_error_string_buf[256];
                 log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-                                ERR_error_string(ERR_get_error(), NULL),
+                                lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                                 s->ssl_ca_file);
             }
         }
@@ -898,8 +914,9 @@
         s->ssl_ctx = SSL_CTX_new(SSLv23_server_method());
       #endif
         if (NULL == s->ssl_ctx) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-                            ERR_error_string(ERR_get_error(), NULL));
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             return -1;
         }
 
@@ -907,9 +924,10 @@
          * required for client cert verification to work with sessions */
         if (0 == SSL_CTX_set_session_id_context(
                    s->ssl_ctx,(const unsigned char*)CONST_STR_LEN("lighttpd"))){
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ss:s", "SSL:",
                             "failed to set session context",
-                            ERR_error_string(ERR_get_error(), NULL));
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             return -1;
         }
 
@@ -933,8 +951,9 @@
             if ((SSL_OP_NO_SSLv2
                  & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv2))
                 != SSL_OP_NO_SSLv2) {
+		char ssl_error_string_buf[256];
                 log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-                                ERR_error_string(ERR_get_error(), NULL));
+                                lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                 return -1;
             }
         }
@@ -945,8 +964,9 @@
             if ((SSL_OP_NO_SSLv3
                  & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv3))
                 != SSL_OP_NO_SSLv3) {
+		char ssl_error_string_buf[256];
                 log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-                                ERR_error_string(ERR_get_error(), NULL));
+                                lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                 return -1;
             }
         }
@@ -954,8 +974,9 @@
         if (!buffer_string_is_empty(s->ssl_cipher_list)) {
             /* Disable support for low encryption ciphers */
             if (SSL_CTX_set_cipher_list(s->ssl_ctx,s->ssl_cipher_list->ptr)!=1){
+		char ssl_error_string_buf[256];
                 log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-                                ERR_error_string(ERR_get_error(), NULL));
+                                lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                 return -1;
             }
 
@@ -1077,8 +1098,9 @@
             if (!buffer_string_is_empty(s1->ssl_ca_dn_file)) {
                 if (1 != SSL_CTX_load_verify_locations(
                            s->ssl_ctx, s1->ssl_ca_dn_file->ptr, NULL)) {
+                    char ssl_error_string_buf[256];
                     log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-                                    ERR_error_string(ERR_get_error(), NULL),
+                                    lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                                     s1->ssl_ca_dn_file);
                     return -1;
                 }
@@ -1086,8 +1108,9 @@
             if (!buffer_string_is_empty(s1->ssl_ca_file)) {
                 if (1 != SSL_CTX_load_verify_locations(
                            s->ssl_ctx, s1->ssl_ca_file->ptr, NULL)) {
+                    char ssl_error_string_buf[256];
                     log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-                                    ERR_error_string(ERR_get_error(), NULL),
+                                    lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                                     s1->ssl_ca_file);
                     return -1;
                 }
@@ -1123,24 +1146,27 @@
 
         if (1 != SSL_CTX_use_certificate_chain_file(s->ssl_ctx,
                                                     s->ssl_pemfile->ptr)) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-                            ERR_error_string(ERR_get_error(), NULL),
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                             s->ssl_pemfile);
             return -1;
         }
 
         if (1 != SSL_CTX_use_PrivateKey(s->ssl_ctx, s->ssl_pemfile_pkey)) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "ssbb", "SSL:",
-                            ERR_error_string(ERR_get_error(), NULL),
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                             s->ssl_pemfile, s->ssl_privkey);
             return -1;
         }
 
         if (SSL_CTX_check_private_key(s->ssl_ctx) != 1) {
+            char ssl_error_string_buf[256];
             log_error_write(srv, __FILE__, __LINE__, "sssbb", "SSL:",
                             "Private key does not match the certificate public "
                             "key, reason:",
-                            ERR_error_string(ERR_get_error(), NULL),
+                            lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)),
                             s->ssl_pemfile, s->ssl_privkey);
             return -1;
         }
@@ -1544,6 +1570,7 @@
         }
 
         if (r <= 0) {
+            char ssl_error_string_buf[256];
             int ssl_r;
             unsigned long err;
 
@@ -1560,7 +1587,7 @@
                     do {
                         log_error_write(srv, __FILE__, __LINE__, "sdds",
                                         "SSL:", ssl_r, r,
-                                        ERR_error_string(err, NULL));
+                                        lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                     } while((err = ERR_get_error()));
                 } else if (r == -1) {
                     /* no, but we have errno */
@@ -1592,7 +1619,7 @@
                 while((err = ERR_get_error())) {
                     log_error_write(srv, __FILE__, __LINE__, "sdds",
                                     "SSL:", ssl_r, r,
-                                    ERR_error_string(err, NULL));
+                                    lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                 }
                 break;
             }
@@ -1665,6 +1692,7 @@
              && (hctx->conf.ssl_read_ahead || SSL_pending(hctx->ssl) > 0));
 
     if (len < 0) {
+        char ssl_error_string_buf[256];
         int oerrno = errno;
         switch ((r = SSL_get_error(hctx->ssl, len))) {
         case SSL_ERROR_WANT_WRITE:
@@ -1696,7 +1724,7 @@
             while((ssl_err = ERR_get_error())) {
                 /* get all errors from the error-queue */
                 log_error_write(srv, __FILE__, __LINE__, "sds", "SSL:",
-                        r, ERR_error_string(ssl_err, NULL));
+                        r, lighttpd_ERR_error_string_n(ssl_err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             }
 
             switch(oerrno) {
@@ -1744,7 +1772,7 @@
                 }
                 /* get all errors from the error-queue */
                 log_error_write(srv, __FILE__, __LINE__, "sds", "SSL:",
-                                r, ERR_error_string(ssl_err, NULL));
+                                r, lighttpd_ERR_error_string_n(ssl_err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
             }
             break;
         }
@@ -1776,8 +1804,9 @@
     /* connect fd to SSL */
     hctx->ssl = SSL_new(p->config_storage[srv_sock->sidx]->ssl_ctx);
     if (NULL == hctx->ssl) {
+	char ssl_error_string_buf[256];
         log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-                        ERR_error_string(ERR_get_error(), NULL));
+                        lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
         return HANDLER_ERROR;
     }
 
@@ -1788,8 +1817,9 @@
     SSL_set_accept_state(hctx->ssl);
 
     if (1 != (SSL_set_fd(hctx->ssl, con->fd))) {
+	char ssl_error_string_buf[256];
         log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-                        ERR_error_string(ERR_get_error(), NULL));
+                        lighttpd_ERR_error_string_n(ERR_get_error(), ssl_error_string_buf, sizeof(ssl_error_string_buf)));
         return HANDLER_ERROR;
     }
 
@@ -1818,6 +1848,7 @@
 static void
 mod_openssl_close_notify(server *srv, handler_ctx *hctx)
 {
+	char ssl_error_string_buf[256];
         int ret, ssl_r;
         unsigned long err;
         ERR_clear_error();
@@ -1877,7 +1908,7 @@
                     do {
                         log_error_write(srv, __FILE__, __LINE__, "sdds",
                                         "SSL:", ssl_r, ret,
-                                        ERR_error_string(err, NULL));
+                                        lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                     } while((err = ERR_get_error()));
                 } else if (errno != 0) {
                     /*ssl bug (see lighttpd ticket #2213): sometimes errno==0*/
@@ -1898,7 +1929,7 @@
                 while((err = ERR_get_error())) {
                     log_error_write(srv, __FILE__, __LINE__, "sdds",
                                     "SSL:", ssl_r, ret,
-                                    ERR_error_string(err, NULL));
+                                    lighttpd_ERR_error_string_n(err, ssl_error_string_buf, sizeof(ssl_error_string_buf)));
                 }
 
                 break;
