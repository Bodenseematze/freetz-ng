#!/bin/bash

exit1() {
	echo -e "$*"
	rm -rf "$TDIR"
	exit 1
}

# arguments
IN="$1"
PASS="$2"
if [ "$#" == "0" ]; then
	echo
	echo "Decodes an encrypted freetz settings backup file to restore on another device"
	echo
	echo "Usage: $0: <file> [pass]"
	echo " <file> - encrypted settings backup .tar file"
	echo " [pass] - password of settings backup file"
	echo " Output will be saved with extension .decoded.tar"
	exit1
fi
OUT="${IN%.*}.decoded.tar"
[ -e "$OUT" ] && exit1 "File $OUT does yet exist!"
[ ! -s "$IN" ] && exit1 "File $IN does not exist!"

# decoder
SCRIPT="$(readlink -f $0)"
PARENT="$(dirname ${SCRIPT%/*})"
DECS="$PARENT/tools/decoder/scripts"
DECB="$PARENT/tools/decoder/bin/decoder.$(uname -m)"
[ ! -d "$DECS" ] && exit1 "Please run 'make yourfritz-decoder-host' first."
[ ! -x "$DECB" ] && echo "Using decoder scripts $DECS" && DECODER="$DECS/" && PFDHEX=''
[   -x "$DECB" ] && echo "Using decoder binary $DECB"  && DECODER="$DECB " && PFDHEX='--hex-output'

# unpack
TDIR="$(mktemp -d)"
[ ! -d "$TDIR" ] && exit1 "Can not create temporary directory."
echo "Using temp: $TDIR"
tar xf "$IN" -C "$TDIR" --exclude=identity.md5
[ -s "$TDIR/settings.tgz.crypted" -a -s "$TDIR/environment.txt.crypted" ] || exit1 "This is not a valid encrypted settings backup file"

# decrypt
[ -z "$PASS" ] && read -sp "Enter password for decryption (hidden input): " PASS  && echo
SSLCOMPAT='n'
for x in settings.tgz environment.txt; do
	openssl enc -d -aes256 -pbkdf2 -pass pass:"$PASS" -in "$TDIR/$x.crypted" -out "$TDIR/$x"
	retval=$?
	if [ "$retval" != "0" ]; then
		echo "Trying OpenSSL 1.0 compatibility mode"
		openssl enc -d -aes256 -pass pass:"$PASS" -in "$TDIR/$x.crypted" -out "$TDIR/$x"
		retval=$?
		SSLCOMPAT='y'
	fi
	[ "$retval" != "0" ] && exit1 "Decryption failed, wrong password?"
done
rm "$TDIR/settings.tgz.crypted"
tar xf "$TDIR/settings.tgz" -C "$TDIR"
rm "$TDIR/settings.tgz"

# password
mv "$TDIR/environment.txt.crypted" "$TDIR/Environment.txt.crypted"
KEY=$(${DECODER}password_from_device $PFDHEX -a "$TDIR/environment.txt")
[ -z "$KEY" ] && exit1 "Can not find device key"
echo -n "Device key: ${KEY:0:4}" ; echo "${KEY:4}" | sed 's/./*/g'
rm "$TDIR/environment.txt"

# decode
mkdir "$TDIR/decrypted"
echo -n "Processing files "
for x in $TDIR/var_flash/*; do
	echo -n "."
	[ ! -s "$x" ] && touch "$TDIR/decrypted/${x#$TDIR/var_flash/}" && continue  # WORKAROUND, may be removed later
	${DECODER}decode_secrets "$KEY" < "$x" > "$TDIR/decrypted/${x#$TDIR/var_flash/}"
done
echo
echo "Changed values:"
diff -Nau0r $TDIR/var_flash $TDIR/decrypted | grep -a '^[-+][+ \t]' | sed -r "s,.* $TDIR/var_flash/([^\t ]*).*,\1,g"
rm -rf "$TDIR/var_flash"

# enctyption
mv "$TDIR/decrypted" "$TDIR/var_flash"
[ "$(openssl version | sed -rn 's/^OpenSSL ([0-9])\.([0-9])\..*/\1\2/p')" -lt 11 2>/dev/null ] && SSLOPT='-md sha256' || SSLOPT='-pbkdf2'
[ "$SSLCOMPAT" == 'y' ] && SSLOPT='-md sha256'
tar cz -C "$TDIR" var_flash/ | openssl enc -e -aes256 $SSLOPT -pass pass:"$PASS" > "$TDIR/settings.tgz.crypted" \
  || exit1 "Can not encrypt settings"
rm -rf "$TDIR/var_flash"

# bundling
echo 'This file is decoded and could be restored to any device' >> "$TDIR/contents.txt"
sed '/decoder_for_settings_backup/d' -i "$TDIR/contents.txt"
echo "Writing file: $OUT"
tar cf "$OUT" -C "$TDIR" $(ls -1 $TDIR) || exit1 "Can not pack file"

# cleanup
rm -rf "$TDIR"
echo "done"

