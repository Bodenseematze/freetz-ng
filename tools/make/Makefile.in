TOOLS_CC:=gcc
TOOLS_CXX:=g++
TOOLS_CFLAGS:=-Wall -O2
TOOLS_CXXFLAGS:=-Wall -O2
TOOLS_LDFLAGS:=

# bitness of the build system (also the host system)
# heuristic: if "uname -m" contains 64 then it's a 64-bit system, 32-bit otherwise
HOST_BITNESS:=$(if $(findstring 64,$(shell uname -m)),64,32)
# on 32-bit systems no special CFLAGS are required, on all other systems use -m32 [ and hope it's supported :-) aarch64 does not :{ ]
HOST_CFLAGS_FORCE_32BIT_CODE:=$(if $(filter-out 32,$(HOST_BITNESS)),-m32)

TOOLS_SOURCE_DIR:=$(FREETZ_BASE_DIR)/source/host-tools
HOST_TOOLS_DIR:=$(FREETZ_BASE_DIR)/$(TOOLS_BUILD_DIR)

$(TOOLS_SOURCE_DIR) $(HOST_TOOLS_DIR):
	@mkdir -p $@

TOOLS:=$(sort $(basename $(notdir $(wildcard $(TOOLS_DIR)/make/*/*.mk))))

TOOLS_TARXZBUNDLE:=tools-host

# tools not built by default
TOOLS_CONDITIONAL:=$(TOOLS_TARXZBUNDLE)
TOOLS_CONDITIONAL+=avm-rle-host
TOOLS_CONDITIONAL+=dtc-host
TOOLS_CONDITIONAL+=gmp-host
TOOLS_CONDITIONAL+=mpc-host
TOOLS_CONDITIONAL+=mpfr-host
TOOLS_CONDITIONAL+=lzma1-host
TOOLS_CONDITIONAL+=lzma2-host
TOOLS_CONDITIONAL+=python-host
TOOLS_CONDITIONAL+=scons-host
TOOLS_CONDITIONAL+=xdelta-host
TOOLS_CONDITIONAL+=$(if $(FREETZ_STRIP_LIBRARIES),,mklibs-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_SHARE_terminfo),,ncurses-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_ROOTEMU_FAKEROOT),,fakeroot-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_ROOTEMU_PSEUDO),,pseudo-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_AVM_PROP_OUTER_FILESYSTEM_TYPE_EXT2),,e2fsprogs-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_AVM_PROP_OUTER_FILESYSTEM_TYPE_EXT2),,genext2fs-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_SEPARATE_AVM_UCLIBC),,patchelf-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_AVM_HAS_NMI_VECTOR),,sfk-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_AVM_HAS_FWLAYOUT_5),,uimg-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_AVM_HAS_FWLAYOUT_6),,fitimg-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_AVM_KERNEL_CONFIG_AREA_KNOWN),,yf-akcarea-host)
TOOLS_CONDITIONAL+=$(if $(FREETZ_PATCH_MODFS_BOOT_MANAGER),,yf-bootmanager-host)

# tools not in dl-archive
TOOLS_BUILD_LOCAL:=$(TOOLS_TARXZBUNDLE)
TOOLS_BUILD_LOCAL+=gmp-host
TOOLS_BUILD_LOCAL+=kconfig-host
TOOLS_BUILD_LOCAL+=mpc-host
TOOLS_BUILD_LOCAL+=mpfr-host
TOOLS_BUILD_LOCAL+=scons-host

# until next host-tools update
#TOOLS_BUILD_LOCAL+=...


TOOLS_SUBMAKE=cmd() { $(MAKE) $(QUIET) "$$@" $(SILENT) || { $(call ERROR,1,$(BUILD_FAIL_MSG)) } }; $(call _ECHO,building) cmd
CONFIGURE=conf_cmd() { ./configure $(QUIET) "$$$$@" $(SILENT) || { $(call ERROR,1,$(BUILD_FAIL_MSG)) } };
AUTORECONF=autoreconf -f -i $(SILENT) || { $(call ERROR,1,autoreconf failed) };

# If CONFIG_SITE is exported, it is used from the build host for tools
unexport CONFIG_SITE
TOOLS_SITE:="$(CONFIG_SITE)"

# Don't use TOOLS_PATH here because it's named TOOLS_DIR ;-)
TOOLS_PATH="$(PATH_DIR):$(PATH)"

# commands to run before calling configure
# each command has to be terminated by ';'
TOOLS_CONFIGURE_PRE_CMDS:=
TOOLS_CONFIGURE_PRE_CMDS += $(RM) config.{cache,status};

# setup environment for configure
TOOLS_CONFIGURE_ENV:=
TOOLS_CONFIGURE_ENV += PATH=$(TOOLS_PATH)

# Set compiler/linker flags here, not in TOOLS_CONFIGURE_OPTIONS,
# because this way they do not disturb old configure scripts
TOOLS_CONFIGURE_ENV += CC="$(TOOLS_CC)"
TOOLS_CONFIGURE_ENV += CXX="$(TOOLS_CXX)"
TOOLS_CONFIGURE_ENV += CFLAGS="$(TOOLS_CFLAGS)"
TOOLS_CONFIGURE_ENV += CXXFLAGS="$(TOOLS_CXXFLAGS)"
TOOLS_CONFIGURE_ENV += LDFLAGS="$(TOOLS_LDFLAGS)"

# Common options for configure
TOOLS_CONFIGURE_OPTIONS:=
TOOLS_CONFIGURE_OPTIONS += $(DISABLE_NLS)


### TOOLS_INIT
#   $(1) = version (mandatory)
#   $(2) = lower-case tool name (optional)
#   $(3) = upper-case tool name (optional)
define TOOLS_INIT__INT

PKG_TYPE:=HTL
PKG_MAKEFILE:=$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
PKG_BASENAME:=$(basename $(notdir $(PKG_MAKEFILE)))

$(if $(strip $1),,$(error Undefined version for TOOLS_INIT in $(PKG_MAKEFILE)))
pkg:=$(if $(strip $2),$(strip $2),$(PKG_BASENAME))
PKG:=$(if $(strip $3),$(strip $3),$(call TOUPPER_NAME,$(pkg)))
pkg_short:=$(patsubst %-host,%,$(pkg))

$(PKG)_VERSION:=$(strip $1)
$(PKG)_MAKE_DIR:=$(TOOLS_DIR)/make/$(pkg)
$(PKG)_SOURCE_DIR:=$(TOOLS_SOURCE_DIR)
$(PKG)_DIR:=$($(PKG)_SOURCE_DIR)/$(pkg_short)-$($(PKG)_VERSION)
$(PKG)_SRC:=$($(PKG)_MAKE_DIR)/src

$(PKG)_TARBALL_STRIP_COMPONENTS:=1
$(PKG)_TARBALL_INCLUDE_FILTER:=
$(PKG)_CONFIGURE_DEFOPTS:=y

$(PKG)_BUILD_PREREQ:=
$(PKG)_BUILD_PREREQ_HINT:=
$(PKG)_DEPENDS_ON:=$(UNPACK_TARBALL_PREREQUISITES)

$(pkg)-precompiled: $(pkg)-precompiled--int clear-echo-temporary

endef
define TOOLS_INIT__INTV
$(value TOOLS_INIT__INT)
endef
define TOOLS_INIT
$(eval $(call TOOLS_INIT__INTV,$1,$2,$3))
endef


### TOOLS_FINISH
define TOOLS_FINISH__INT

$(pkg)-precompiled--int: $(patsubst %,%-precompiled,$($(PKG)_DEPENDS_ON))
.PHONY: $(pkg)-precompiled--int

$(pkg)-precompiled:
	@$(call _ECHO_DONE)

.PHONY: $(pkg)-build-prereq
$(pkg)-build-prereq: $($(PKG)_DIR)/.build-prereq-checked
$($(PKG)_DIR)/.build-prereq-checked:
ifneq ($($(PKG)_BUILD_PREREQ),)
	@MISSING_PREREQ=""; \
	for fv in $($(PKG)_BUILD_PREREQ); do \
		f=$$$$(echo $$$$fv | cut -d ':' -f 1); \
		v=$$$$(echo $$$$fv | cut -d ':' -sf 2 | sed -e 's,[.],[.],g'); \
		if ! which $$$$f >/dev/null 2>&1; then \
			MISSING_PREREQ="$$$$MISSING_PREREQ $$$$f"; \
		elif [ -n "$$$$v" ] && ! $$$$f --version 2>&1 | grep -q "$$$$v"; then \
			MISSING_PREREQ="$$$$MISSING_PREREQ $$$$fv"; \
		fi; \
	done; \
	if [ -n "$$$$MISSING_PREREQ" ]; then \
		echo -n -e "$(_Y)"; \
		echo -e \
			"ERROR: The following commands/packages required for building the $(pkg)-package are missing on your system:" \
			`echo $$$$MISSING_PREREQ | sed -e 's| |, |g'`; \
		if [ -n "$(strip $($(PKG)_BUILD_PREREQ_HINT))" ]; then \
			echo "$($(PKG)_BUILD_PREREQ_HINT)"; \
		fi; \
		echo -n -e "$(_N)"; \
		exit 1; \
	fi;
endif
	@mkdir -p $$(dir $$@); touch $$@;

PKG_TYPE:=
PKG_MAKEFILE:=
PKG_BASENAME:=

pkg:=
PKG:=
pkg_short:=

endef
TOOLS_FINISH=$(eval $(TOOLS_FINISH__INT))





### PKG_SOURCE_DOWNLOAD - download source packages
define PKG_SOURCE_DOWNLOAD__INT
NON_LOCALSOURCE_PACKAGES+=$(pkg)
$(DL_DIR)/$($(PKG)_SOURCE): | $(DL_DIR)
	$(call _ECHO,downloading)
	@if [ -e $(MIRROR_DIR)/$($(PKG)_SOURCE) -a ! -e $(DL_DIR)/$($(PKG)_SOURCE) ]; then \
		$(call MESSAGE, Found $($(PKG)_SOURCE) in $(MIRROR_DIR), creating hard link); \
		ln $(MIRROR_DIR)/$($(PKG)_SOURCE) $(DL_DIR); \
	else \
		$(DL_TOOL) \
			$(DL_DIR) \
			$(if $($(PKG)_SOURCE_DOWNLOAD_NAME),$($(PKG)_SOURCE_DOWNLOAD_NAME),$($(PKG)_SOURCE)) \
			$($(PKG)_SITE) \
			$(or $($(PKG)_SOURCE_SHA512),$($(PKG)_SOURCE_SHA256),$($(PKG)_SOURCE_SHA1),$($(PKG)_SOURCE_MD5),$($(PKG)_SOURCE_CHECKSUM),$($(PKG)_HASH)) \
			$(SILENT) \
			$(if $($(PKG)_SOURCE_DOWNLOAD_NAME),&& mv -f $(DL_DIR)/$($(PKG)_SOURCE_DOWNLOAD_NAME) $(DL_DIR)/$($(PKG)_SOURCE)); \
	fi

$(pkg)-download: $(DL_DIR)/$($(PKG)_SOURCE)

$(MIRROR_DIR)/$($(PKG)_SOURCE): | $(MIRROR_DIR)
	@if [ -e $(DL_DIR)/$($(PKG)_SOURCE) ]; then \
		$(call MESSAGE, Found $($(PKG)_SOURCE) in $(DL_DIR), creating hard link); \
		ln $(DL_DIR)/$($(PKG)_SOURCE) $(MIRROR_DIR); \
	else \
		$(DL_TOOL) \
			$(MIRROR_DIR) \
			$(if $($(PKG)_SOURCE_DOWNLOAD_NAME),$($(PKG)_SOURCE_DOWNLOAD_NAME),$($(PKG)_SOURCE)) \
			$($(PKG)_SITE) \
			$(or $($(PKG)_SOURCE_SHA512),$($(PKG)_SOURCE_SHA256),$($(PKG)_SOURCE_SHA1),$($(PKG)_SOURCE_MD5),$($(PKG)_SOURCE_CHECKSUM),$($(PKG)_HASH)) \
			$(SILENT) \
			$(if $($(PKG)_SOURCE_DOWNLOAD_NAME),&& mv -f $(DL_DIR)/$($(PKG)_SOURCE_DOWNLOAD_NAME) $(DL_DIR)/$($(PKG)_SOURCE)); \
	fi

$(pkg)-download-mirror: $(MIRROR_DIR)/$($(PKG)_SOURCE)

$(pkg)-check-download:
	@echo -n "Checking download for package $(pkg)..."
	@if $(DL_TOOL) check $($(PKG)_SOURCE) $($(PKG)_SITE); then \
		echo "ok."; \
	else \
		echo "ERROR: NOT FOUND!"; \
	fi

.PHONY: $(pkg)-download $(pkg)-check-download $(pkg)-download-mirror
endef

TOOLS_SOURCE_DOWNLOAD=$(eval $(PKG_SOURCE_DOWNLOAD__INT))





### PKG_UNPACK - unpack source archive & apply patches
# Unpack, without patch, but only if source package is defined
define PKG_UNPACK
	$(if $($(PKG)_SOURCE), \
		$(strip \
			mkdir -p $($(PKG)_DIR); \
			$(call \
				$(if $($(PKG)_CUSTOM_UNPACK),$(PKG)_CUSTOM_UNPACK,UNPACK_TARBALL), \
				$(DL_DIR)/$($(PKG)_SOURCE), \
				$($(PKG)_DIR), \
				$(strip $(filter-out 0,$($(PKG)_TARBALL_STRIP_COMPONENTS))), \
				$(strip $($(PKG)_TARBALL_INCLUDE_FILTER)) \
			) \
		) \
	)
endef

### PKG_PATCH - apply patches
define PKG_PATCH
	$(subst $(_dollar),$(_dollar)$(_dollar), \
		$(call \
			APPLY_PATCHES, \
			$($(PKG)_MAKE_DIR)/patches \
			$(if $(strip $($(PKG)_CONDITIONAL_PATCHES)),$(addprefix $($(PKG)_MAKE_DIR)/patches/,$(strip $($(PKG)_CONDITIONAL_PATCHES)))), \
			$($(PKG)_DIR) \
		) \
	)
endef

# $1: commands to execute
# $2: optional directory $1 to be executed within, default $($(PKG)_DIR)
define PKG_EXECUTE_WITHIN__INT
	$(if $(strip $(1)),(cd $(if $(strip $(2)),$(strip $(2)),$($(PKG)_DIR)); $(strip $(1))))
endef

# Removes all files under $1 except for those in $2
# During tar-host build there is no $(TAR)
define RMDIR_KEEP_FILES__INT
	[ -x $(TAR) ] && Tar='$(TAR)' || Tar='tar'; \
	$(if $2,if [ -d "$1" ]; then TMPFILE=`mktemp`; $$$${Tar} -C $1 -cf $$$$TMPFILE $2; fi;) \
	$(RM) -r $1; \
	$(if $2,if [ -n "$$$$TMPFILE" ]; then mkdir -p $1; $$$${Tar} -C $1 -xf $$$$TMPFILE; rm -f $$$$TMPFILE; fi;)
endef

## Unpack and patch package
define PKG_UNPACKED__INT
$($(PKG)_DIR)/.unpacked: $(DL_DIR)/$($(PKG)_SOURCE) $(if $($(PKG)_CUSTOM_UNPACK),$($(PKG)_DIR)/.build-prereq-checked) | $($(PKG)_SOURCE_DIR) $($(PKG)_DEPENDS_ON)
	@$(call _ECHO,preparing)
	@$(call RMDIR_KEEP_FILES__INT,$($(PKG)_DIR),.build-prereq-checked)
	$(call PKG_UNPACK)
	$(call PKG_EXECUTE_WITHIN__INT,$($(PKG)_PATCH_PRE_CMDS))
	$(call PKG_PATCH)
	$(call PKG_EXECUTE_WITHIN__INT,$($(PKG)_PATCH_POST_CMDS))
	@touch $$@
$(pkg)-source: $($(PKG)_DIR)/.unpacked
$(pkg)-unpacked: $($(PKG)_DIR)/.unpacked
.PHONY: $(pkg)-source $(pkg)-unpacked
endef

## "unpack" (actually copy) local source package
define PKG_UNPACKED_LOCALSOURCE_PACKAGE__INT
$($(PKG)_DIR)/.unpacked: $(wildcard $($(PKG)_MAKE_DIR)/src/*) | $($(PKG)_SOURCE_DIR)
	@$(call _ECHO,preparing)
	@$(call RMDIR_KEEP_FILES__INT,$($(PKG)_DIR),.build-prereq-checked)
	mkdir -p $($(PKG)_DIR)
	cp -a $$^ $($(PKG)_DIR)
	@touch $$@
$(pkg)-source: $($(PKG)_DIR)/.unpacked
$(pkg)-unpacked: $($(PKG)_DIR)/.unpacked
.PHONY: $(pkg)-source $(pkg)-unpacked
endef

TOOLS_UNPACKED           =$(eval $(PKG_UNPACKED__INT))
TOOLS_LOCALSOURCE_PACKAGE=$(eval $(PKG_UNPACKED_LOCALSOURCE_PACKAGE__INT))





### Configure package
define PKG_CONFIGURED_COMMON__INT
$(pkg)-configured: $($(PKG)_DIR)/.configured
.PHONY: $(pkg)-configured
endef
## Configure package, using ./configure
define PKG_CONFIGURED_CONFIGURE__INT
# Must be first
$(PKG_CONFIGURED_COMMON__INT)
$($(PKG)_DIR)/.configured: $($(PKG)_DIR)/.build-prereq-checked $($(PKG)_DIR)/.unpacked
	@$(call _ECHO,configuring)
	($(CONFIGURE) \
		cd $($(PKG)_DIR); \
		$(TOOLS_CONFIGURE_PRE_CMDS) \
		$($(PKG)_CONFIGURE_PRE_CMDS) \
		$(if $(strip $($(PKG)_BUILD_SUBDIR)),cd $(strip $($(PKG)_BUILD_SUBDIR));,) \
		$(TOOLS_CONFIGURE_ENV) \
		$($(PKG)_CONFIGURE_ENV) \
		CONFIG_SITE=$(TOOLS_SITE) \
		conf_cmd \
		$(if $(findstring y,$($(PKG)_CONFIGURE_DEFOPTS)), $(TOOLS_CONFIGURE_OPTIONS)) \
		$($(PKG)_CONFIGURE_OPTIONS) \
		$(if $(strip $($(PKG)_BUILD_SUBDIR)),&& { cd $(abspath $($(PKG)_DIR)); },) \
		$(if $($(PKG)_CONFIGURE_POST_CMDS),&& { $($(PKG)_CONFIGURE_POST_CMDS) },) \
	)
	@touch $$@
endef
TOOLS_CONFIGURED_CONFIGURE=$(eval $(PKG_CONFIGURED_CONFIGURE__INT))

## Package needs no configuration
define PKG_CONFIGURED_NOP__INT
# Must be first
$(PKG_CONFIGURED_COMMON__INT)
$($(PKG)_DIR)/.configured: $($(PKG)_DIR)/.build-prereq-checked $($(PKG)_DIR)/.unpacked
	@touch $$@
endef

TOOLS_CONFIGURED_NOP=$(eval $(PKG_CONFIGURED_NOP__INT))






