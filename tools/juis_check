#!/bin/bash
# Ask avm's update service for latest firmware infos like download url
MYPWD="$(dirname $(realpath $0))"

help() {
cat << EOX

$0 parameters:
	<-i>: [Prio 3] Computer
	<-s>: [Prio 2] Fritzbox
	<-d>: [Prio 1] RAW-out (or no -i and -s)
	<--plain>: Forces to use http. AVM uses this only.
	<--https>: Forces to use https. Curl is mandatory for https.
	Without --plain and --https, the default is https if curl is installed. But on fritzbox only if FREETZ_ADD_JUIS_CHECK__SSL is set.

Example: env - tools/juis_check Version=154.07.35-80123 Serial=123456789012 Name=FRITZ\!Boxâ€Š7590 HW=226 OEM=avm Lang=de Annex=B Country=049 Flag=empty Buildtype=1000 Nonce=XXXXXXXXXXXXXXXXXXXXXXXX -i -s -d 
Or just: tools/juis m  # f

EOX
exit
}

js() { [ -e "$1" ] && sed -rn "s/^<.:$2>(.*)<.*/\1/p" "$1" ; }

main() {
	local x soap avmca url flags body post cache info zwsp="$(printf '\342\200\212')"
	local line='################################################################'
	local type='text/xml; charset="utf-8"'
	#soap='SOAPAction: "http://jason.avm.de/updatecheck/BoxFirmwareUpdateCheck"'

	if [ "$SSL" == 'y' ]; then
		avmca="$MYPWD/avm-rootca.pem"
		[ -e "/etc/avm_root_ca.pem"     ] && avmca="/etc/avm_root_ca.pem"
		[ -e "/etc/jasonii_root_ca.pem" ] && avmca="/etc/jasonii_root_ca.pem"
		url='jws.avm.de/Jason/UpdateInfoService'      # https-cert matches hostname
	else
		url='185.jws.avm.de/Jason/UpdateInfoService'  # new
		#url='jws.avm.de/Jason/UpdateCheck'           # old
	fi

	Buildnumber="${Version#*-}"
	x="${Version%-*}"
	Major="${x%%.*}"
	x="${x#*.}"
	Minor="${x%.*}"
	Patch="${x#*.}"

	[ -e '/var/juis_boxinfo.xml' ] && info='/var/juis_boxinfo.xml' || info='/var/jason_boxinfo.xml'
	[ -z "$Name"      ] &&      Name="$(js $info 'Name')"
	[ -z "$HW"        ] &&        HW="$(js $info 'HW')"
	[ -z "$OEM"       ] &&       OEM="$(js $info 'OEM')"
	[ -z "$Lang"      ] &&      Lang="$(js $info 'Lang')"
	[ -z "$Annex"     ] &&     Annex="$(js $info 'Annex')"
	[ -z "$Country"   ] &&   Country="$(js $info 'Country')"
	[ -z "$Flag"      ] &&      Flag="$(js $info 'Flag')"
	[ -z "$Buildtype" ] && Buildtype="$(js $info 'Buildtype')"
	[ -z "$Buildtype" ] && Buildtype="$(js $info 'Revision')"

[ -z "${Flag// /}" ] && Flag='empty'
for x in $Flag; do flags="<q:Flag>${x/empty/}</q:Flag>
$flags"; done

body=$(cat << EOX
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:e="http://juis.avm.de/updateinfo" xmlns:q="http://juis.avm.de/request">
<soap:Header/>
<soap:Body>
<e:BoxFirmwareUpdateCheck>
<e:RequestHeader>
<q:Nonce>$Nonce</q:Nonce>
<q:UserAgent>TestClient</q:UserAgent>
<q:ManualRequest>true</q:ManualRequest></e:RequestHeader>
<e:BoxInfo>
<q:Name>${Name//$zwsp/ }</q:Name>
<q:HW>$HW</q:HW>
<q:Major>$Major</q:Major>
<q:Minor>$Minor</q:Minor>
<q:Patch>$Patch</q:Patch>
<q:Buildnumber>$Buildnumber</q:Buildnumber>
<q:Buildtype>$Buildtype</q:Buildtype>
<q:Serial>$Serial</q:Serial>
<q:OEM>$OEM</q:OEM>
<q:Lang>$Lang</q:Lang>
<q:Country>$Country</q:Country>
<q:Annex>$Annex</q:Annex>
$flags
<q:UpdateConfig>1</q:UpdateConfig>
<q:Provider></q:Provider>
<q:ProviderName></q:ProviderName></e:BoxInfo></e:BoxFirmwareUpdateCheck></soap:Body></soap:Envelope>
EOX
)

post=$(cat << EOX
POST /${url#*/} HTTP/1.1
Host: ${url%%/*}:80
Content-Length: ${#body}
Content-Type: ${type}
${soap}

${body}
EOX
)

	cache='/tmp/.juis_check'
	[ "$DEV" == 'i' ] && cache='/dev/null'

	if [ "$SSL" == 'y' ]; then
		resp="$(curl -s -X POST -H "${type}" ${soap:+-H $soap} -d "${body}" "https://${url}" --cacert "${avmca}" \
		  | tee $cache | sed 's,><,>\n<,g' | sed 's,</.*,,g;s/.*>$//g')"
	else
		resp="$(echo -e "${post}" | nc ${url%%/*} 80 2>/dev/null \
		  | tee $cache | sed 's,><,>\n<,g' | sed 's,</.*,,g;s/.*>$//g')"
	fi
	[ -z "$resp" ] && echo 'Did not received an anser.' 1>&2 && exit 1

	case "$DEV" in
		i)
			URL="$(echo "$resp" | sed -n "s/^<ns3:DownloadURL>//p")"
			[ -n "$URL" ] && echo "URL=$URL"
			;;
		s)
			VER="$(echo "$resp" | sed -n "s/^<ns3:Version>//p")"
			[ -n "$VER" -a "$VER" != "$Version" ] && echo "Found newer version: $VER" 1>&2 || echo "No newer version found." 1>&2
			;;
		*)
			echo -ne "Using SSL:=${SSL:-n}\n\nRequest:\n$line"
			[ "$SSL" == 'y' ] && echo -ne "$body" || echo -ne "\n$post"
			echo -e "\n$line\n\nResponse:\n$line"
			if command -v xmllint &>/dev/null; then
				grep '^<' -v "$cache"
				grep '^<' "$cache" | xmllint --format -
			else
				echo "$resp"
			fi
			echo -e "$line\n"
			rm "$cache"
			;;
	esac
}

DEV=''
SSL=''
args() {
	[ "${#*}" == '0' ] && help
	local DEVI DEVS DEVD
	for x in $*; do
		l="${x%=*}"
		r="${x#*=}"
		[ "$x" == '-i' ] && DEVI='x'
		[ "$x" == '-s' ] && DEVS='x'
		[ "$x" == '-d' ] && DEVD='x'
		[ "$x" == '--plain' ] && SSL='n'
		[ "$x" == '--https' ] && SSL='y'
		[ "$x" == "$l" ] && continue
		eval $l="$r"
	done
	[ -n "$DEVI" ] && DEV='i'
	[ -n "$DEVS" ] && DEV='s'
	[ -n "$DEVD" ] && DEV='d'
	[ "$SSL" == 'y' ] && [ -z "$(command -v curl)" ] && echo 'Curl is mandatory for https.' 1>&2 && exit 1
	if [ -z "$SSL" ]; then
		command -v curl >/dev/null && SSL='y' || SSL='n'
		if [ -e '/etc/.freetz-ng-version' ]; then
			grep -q "^FREETZ_ADD_JUIS_CHECK__SSL='y'" /etc/options.cfg 2>/dev/null || SSL='n'
		fi
	fi
}

args "$@"
main

